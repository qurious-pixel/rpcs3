name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    #branches:
    #  - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/

jobs:
  Windows_Build_ClangCL:
    if: "!cancelled()"
    name: RPCS3 Windows Clang-CL
    runs-on: windows-2025
    strategy:
      matrix:
        include:
          - compiler: clangcl
            arch: win64
    env:
      CCACHE_DIR: 'C:\ccache'
      VCPKG_TRIPLET: x64-windows-release
      VCPKG_BUILD_TYPE: release
      #VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: "Setup cmake"
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.0'
        
      #- name: Restore LLVM Cache
      #  uses: actions/cache/restore@main
      #  id: llvm-cache
      #  with:
      #    path: ./llvm-project
      #    key: ${{ runner.os }}-llvm-cache-${{github.run_id}}
      #    restore-keys: ${{ runner.os }}-llvm-cache-
          
      - name: Add LLVM and Ninja to PATH
        shell: pwsh
        run: |
          mkdir llvm
          curl -fsSL https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/clang+llvm-20.1.8-x86_64-pc-windows-msvc.tar.xz | tar -xz -C llvm --strip-components=1
          Add-Content -Path $env:GITHUB_PATH -Value "C:\a\rpcs3\rpcs3\llvm\bin"
          Get-ChildItem -Path C:\a\rpcs3\rpcs3\llvm
          clang-cl.exe --version

      #- name: Save LLVM Cache
      #  #if: github.ref == 'refs/heads/master'
      #  uses: actions/cache/save@main
      #  with:
      #    path: ./llvm-project
      #    key: ${{ steps.llvm-cache.outputs.cache-primary-key }}
      
      #- name: Add LLVM and Ninja to PATH
      #  shell: pwsh
      #  run: |
      #    Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files\LLVM\bin"
      #    Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin"
      #    Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
      #    Add-Content -Path $env:GITHUB_PATH -Value "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja"

      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{github.run_id}}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Setup CI Variables
        run: .ci/setup-windows-ci-vars.sh ${{ matrix.arch }} ${{ matrix.compiler }}

      - name: Build RPCS3
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
          powershell -ExecutionPolicy Bypass -File .ci/build-windows-clang-cl.ps1

      - name: Save build Ccache
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-build-ccache.outputs.cache-primary-key }}

      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: RPCS3 for Windows (clang-cl)
          path: ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}
          compression-level: 0
          if-no-files-found: error

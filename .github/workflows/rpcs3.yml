name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    #branches:
    #  - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/

jobs:
  Windows_Build_ClangCL:
    if: "!cancelled()"
    name: RPCS3 Windows Clang-CL
    runs-on: windows-2025
    strategy:
      matrix:
        include:
          - compiler: clangcl
            arch: win64
    env:
      CCACHE_DIR: 'C:\ccache'
      VCPKG_TRIPLET: x64-windows-release
      VCPKG_BUILD_TYPE: release
      #VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: "Setup cmake"
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.0'

      #- name: Download and extract prebuilt vcpkg
      #  run: |
      #    curl -L -o vcpkg.7z.001 https://github.com/Megamouse/rpcs3/releases/download/vcpkg-prebuilt-v1.0/vcpkg.7z.001
      #    curl -L -o vcpkg.7z.002 https://github.com/Megamouse/rpcs3/releases/download/vcpkg-prebuilt-v1.0/vcpkg.7z.002
      #    curl -L -o vcpkg.7z.003 https://github.com/Megamouse/rpcs3/releases/download/vcpkg-prebuilt-v1.0/vcpkg.7z.003
      #    curl -L -o vcpkg.7z.004 https://github.com/Megamouse/rpcs3/releases/download/vcpkg-prebuilt-v1.0/vcpkg.7z.004
      #    7z x vcpkg.7z.001 -o.\
          
      #- name: Add LLVM
      #  shell: pwsh
      #  run: Add-Content -Path $env:GITHUB_PATH -Value "C:\a\rpcs3\rpcs3\llvm\bin"
        
      - name: Clone vcpkg
        run: git clone https://github.com/microsoft/vcpkg.git

      - name: Bootstrap vcpkg
        shell: pwsh
        run: .\vcpkg\bootstrap-vcpkg.bat
        
      - name: Restore vcpkg cache
        uses: actions/cache/restore@main
        id: restore-vcpkg-cache
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
          key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-${{github.run_id}}
          restore-keys: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Install dependencies with vcpkg
        shell: pwsh
        run: >-
          .\vcpkg\vcpkg.exe install
          ffmpeg[avcodec,avformat,swscale,swresample]
          libpng
          opencv
          qtbase
          qtmultimedia
          qtsvg
          qttools
          vulkan
          zlib
          zstd:x64-windows-static-release
          --triplet $env:VCPKG_TRIPLET
          --clean-after-build
          --classic

      - name: Save vcpkg cache
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
          key: ${{ steps.restore-vcpkg-cache.outputs.cache-primary-key }}

      #- name: Restore LLVM Cache
      #  uses: actions/cache/restore@main
      #  id: llvm-cache
      #  with:
      #    path: ./llvm
      #    key: ${{ runner.os }}-llvm-dl-cache-${{github.run_id}}
      #    restore-keys: ${{ runner.os }}-llvm-cache-
          
      - name: Add LLVM
        shell: pwsh
        run: |
          if (!(Test-Path -Path D:\a\rpcs3\rpcs3\llvm\)) {
            mkdir llvm
            cd llvm
            curl -fsSL https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/clang+llvm-20.1.8-x86_64-pc-windows-msvc.tar.xz | tar -xz -C llvm --strip-components=1
          #  curl -fsSLO https://github.com/c3lang/win-llvm/releases/download/llvm_19_1_5/llvm-19.1.5-windows-amd64-msvc17-msvcrt.7z
          #  curl -fsSLO https://github.com/vovkos/llvm-package-windows/releases/download/clang-20.1.8/clang-20.1.8-windows-amd64-msvc17-msvcrt.7z
          #  7z x llvm-*.7z
          #  mv llvm* /llvm
          }
          Add-Content -Path $env:GITHUB_PATH -Value "D:\a\rpcs3\rpcs3\llvm\bin"

      #- name: Save LLVM Cache
      #  #if: github.ref == 'refs/heads/master'
      #  uses: actions/cache/save@main
      #  with:
      #    path: ./llvm
      #    key: ${{ steps.llvm-cache.outputs.cache-primary-key }}
      
      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{github.run_id}}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Setup CI Variables
        run: .ci/setup-windows-ci-vars.sh ${{ matrix.arch }} ${{ matrix.compiler }}
        
      - name: install DIA SDK
        run: |
          mkdir -p "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional" || true
          cp -r "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/DIA SDK" "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/DIA SDK"

      - name: Build RPCS3
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
          powershell -ExecutionPolicy Bypass -File .ci/build-windows-clang-cl.ps1

      - name: Save build Ccache
        if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-build-ccache.outputs.cache-primary-key }}

      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: RPCS3 for Windows (clang-cl)
          path: ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}
          compression-level: 0
          if-no-files-found: error

name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    #branches:
    #  - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/

jobs:
  Windows_Build_Clang:
    # Only run push event on master branch of main repo, but run all PRs
    #if: github.event_name != 'push' || (github.repository == 'RPCS3/rpcs3' && github.ref_name == 'master')
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          #- msys2: clang64
          #  compiler: clang
          #  arch: win64
          - compiler: clang-cl
            llvmver: 20.1.8

    env:
      CCACHE_DIR: 'C:\ccache'
      VCPKG_TRIPLET: x64-windows-release
      VCPKG_BUILD_TYPE: release
    name: RPCS3 Windows ${{ matrix.compiler }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.compiler == 'clang' }}
        with:
          msystem: ${{ matrix.msys2 }}
          update: true
          cache: true
          install: |
            mingw-w64-clang-x86_64-clang
            mingw-w64-clang-x86_64-ccache
            mingw-w64-clang-x86_64-cmake
            mingw-w64-clang-x86_64-lld
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-llvm
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-opencv
            mingw-w64-clang-x86_64-glew
            mingw-w64-clang-x86_64-vulkan
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-gtest
            mingw-w64-clang-x86_64-qt6-base
            mingw-w64-clang-x86_64-qt6-declarative
            mingw-w64-clang-x86_64-qt6-multimedia
            mingw-w64-clang-x86_64-qt6-svg
            base-devel
            curl
            git
            p7zip

      - name: Clone and bootstrap vcpkg
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          
      - name: Restore vcpkg cache
        if: ${{ matrix.compiler == 'clang-cl' }}
        uses: actions/cache/restore@main
        id: restore-vcpkg-cache
        with:
          path: |
            vcpkg/vcpkg.exe
            vcpkg/installed
            vcpkg/buildtrees
          key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-${{ hashFiles('**/vcpkg') }}
          restore-keys: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Install dependencies with vcpkg
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: >-
          .\vcpkg\vcpkg.exe install
          ffmpeg[avcodec,avformat,swscale,swresample]
          libpng
          opencv
          qtbase
          qtmultimedia
          qtsvg
          qttools
          vulkan
          zlib
          --triplet $env:VCPKG_TRIPLET
          --clean-after-build

      - name: Save vcpkg cache
        if: ${{ !steps.restore-vcpkg-cache.outputs.cache-hit && matrix.compiler == 'clang-cl' }}
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: |
            vcpkg/vcpkg.exe
            vcpkg/installed
            vcpkg/buildtrees
          key: ${{ steps.restore-vcpkg-cache.outputs.cache-primary-key }}

      - name: Restore LLVM Cache
        if: ${{ matrix.compiler == 'clang-cl' }} 
        uses: actions/cache/restore@main
        id: llvm-cache
        with:
          path: ./llvm-${{ matrix.llvmver }}
          key: ${{ runner.os }}-llvm-dl-cache-${{ hashFiles('**/llvm-${{ matrix.llvmver }}') }}
          restore-keys: ${{ runner.os }}-clang-dl-cache-
          
      - name: Add LLVM
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: |
          if (!(Test-Path -Path D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\)) {
            rm -r llvm-*
            #mkdir llvm-${{ matrix.llvmver }}
            curl -fsSLO https://github.com/vovkos/llvm-package-windows/releases/download/llvm-20.1.8/llvm-20.1.8-windows-amd64-msvc17-msvcrt.7z
            curl -fsSLO https://github.com/vovkos/llvm-package-windows/releases/download/clang-20.1.8/clang-20.1.8-windows-amd64-msvc17-msvcrt.7z
            7z x llvm-*.7z
            mv llvm* llvm-${{ matrix.llvmver }}
            rm llvm-*.7z
            7z x clang-*.7z
            Copy-Item -Path "D:\a\rpcs3\rpcs3\clang*\*" -Destination "D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}" -Recurse -Force
            rm -r clang*
          }
          Add-Content -Path $env:GITHUB_PATH -Value "D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\bin"
          C:\PROGRA~1\LLVM\bin\clang-cl.exe --version
          Get-ChildItem -Path "C:\Program Files\LLVM\bin"
          Get-ChildItem -Path "C:\Program Files\LLVM\lib"
 
      - name: Save LLVM Cache
        if: ${{ matrix.compiler == 'clang-cl' && steps.llvm-cache.outputs.cache-hit != 'true' }}
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ./llvm-${{ matrix.llvmver }}
          key: ${{ steps.llvm-cache.outputs.cache-primary-key }}
        
      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Build RPCS3
        if: ${{ matrix.compiler == 'clang' }}
        shell: msys2 {0}
        run: |
          export CCACHE_DIR=$(cygpath -u "$CCACHE_DIR")
          echo "CCACHE_DIR=$CCACHE_DIR"
          .ci/setup-windows-ci-vars.sh ${{ matrix.arch }} ${{ matrix.compiler }}
          .ci/build-windows-clang.sh
          
      - name: install DIA SDK
        if: ${{ matrix.compiler == 'clang-cl' }}      
        run: |
          mkdir -p "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional" || true
          cp -r "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/DIA SDK" "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/DIA SDK"

      - name: Build RPCS3
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
          powershell -ExecutionPolicy Bypass -File .ci/build-windows-clang-cl.ps1

      - name: Save build Ccache
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-build-ccache.outputs.cache-primary-key }}

      - name: Prepare Artifacts
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: cmd
        run: |
          7z a -m0=LZMA2 -mx9 "$BUILD" ./bin/*
          cp -- "$BUILD" "$BUILD_ARTIFACTSTAGINGDIRECTORY"

      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: RPCS3 for Windows (${{ runner.arch }}, ${{ matrix.compiler }})
          path: ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}
          compression-level: 0
          if-no-files-found: error

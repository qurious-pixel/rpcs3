name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    #branches:
    #  - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/

jobs:
  Windows_Build_Clang:
    # Only run push event on master branch of main repo, but run all PRs
    #if: github.event_name != 'push' || (github.repository == 'RPCS3/rpcs3' && github.ref_name == 'master')
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          #- msys2: clang64
          #  compiler: clang
          #  arch: win64
          - compiler: clang-cl
            llvmver: 20.1.8

    env:
      CCACHE_DIR: 'C:\ccache'
      VCPKG_TRIPLET: x64-windows-release
      VCPKG_BUILD_TYPE: release
    name: RPCS3 Windows ${{ matrix.compiler }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.compiler == 'clang' }}
        with:
          msystem: ${{ matrix.msys2 }}
          update: true
          cache: true
          install: |
            mingw-w64-clang-x86_64-clang
            mingw-w64-clang-x86_64-ccache
            mingw-w64-clang-x86_64-cmake
            mingw-w64-clang-x86_64-lld
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-llvm
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-opencv
            mingw-w64-clang-x86_64-glew
            mingw-w64-clang-x86_64-vulkan
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-gtest
            mingw-w64-clang-x86_64-qt6-base
            mingw-w64-clang-x86_64-qt6-declarative
            mingw-w64-clang-x86_64-qt6-multimedia
            mingw-w64-clang-x86_64-qt6-svg
            base-devel
            curl
            git
            p7zip

      - name: Clone and bootstrap vcpkg
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          
      - name: Restore vcpkg cache
        if: ${{ matrix.compiler == 'clang-cl' }}
        uses: actions/cache/restore@main
        id: restore-vcpkg-cache
        with:
          path: |
            vcpkg/vcpkg.exe
            vcpkg/installed
            vcpkg/buildtrees
          key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-${{ hashFiles('**/vcpkg') }}
          restore-keys: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Install dependencies with vcpkg
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: >-
          .\vcpkg\vcpkg.exe install
          ffmpeg[avcodec,avformat,swscale,swresample]
          libpng
          opencv
          qtbase
          qtmultimedia
          qtsvg
          qttools
          vulkan
          zlib
          --triplet $env:VCPKG_TRIPLET
          --clean-after-build

      - name: Save vcpkg cache
        if: ${{ !steps.restore-vcpkg-cache.outputs.cache-hit && matrix.compiler == 'clang-cl' }}
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: |
            vcpkg/vcpkg.exe
            vcpkg/installed
            vcpkg/buildtrees
          key: ${{ steps.restore-vcpkg-cache.outputs.cache-primary-key }}

      - name: Restore LLVM Cache
        if: ${{ matrix.compiler == 'clang-cl' }} 
        uses: actions/cache/restore@main
        id: llvm-cache
        with:
          path: ./llvm-${{ matrix.llvmver }}
          key: ${{ runner.os }}-clang-dl-cache-${{ hashFiles('**/llvm-${{ matrix.llvmver }}') }}
          restore-keys: ${{ runner.os }}-clang-dl-cache-
          
      - name: Add LLVM
        if: ${{ matrix.compiler == 'clang-cl' }}
        shell: pwsh
        run: |
          #if (!(Test-Path -Path D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\)) {
            rm -r llvm-*
            mkdir llvm-${{ matrix.llvmver }}
            cd llvm-${{ matrix.llvmver }}
            curl -fsSLO https://github.com/vovkos/llvm-package-windows/releases/download/llvm-20.1.8/llvm-20.1.8-windows-amd64-msvc17-msvcrt.7z
            curl -fsSLO https://github.com/vovkos/llvm-package-windows/releases/download/clang-20.1.8/clang-20.1.8-windows-amd64-msvc17-msvcrt.7z
            7z x llvm-*.7z
            mv llvm* llvm
            rm llvm-*.7z
            7z x clang-*.7z
            cp -av --link clang* llvm/
            rm -r clang*
          #  curl -fsSL https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.llvmver }}/clang+llvm-${{ matrix.llvmver }}-x86_64-pc-windows-msvc.tar.xz | tar -xz -C llvm-${{ matrix.llvmver }} --strip-components=1
          #}
          Add-Content -Path $env:GITHUB_PATH -Value "D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\llvm\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\clang\bin"
          Get-ChildItem -Path D:\a\rpcs3\rpcs3\llvm-${{ matrix.llvmver }}\llvm\bin

      - name: Save LLVM Cache
        if: ${{ matrix.compiler == 'clang-cl' && steps.llvm-cache.outputs.cache-hit != 'true' }}
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ./llvm-${{ matrix.llvmver }}
          key: ${{ steps.llvm-cache.outputs.cache-primary-key }}
        

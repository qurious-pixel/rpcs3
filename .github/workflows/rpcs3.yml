name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    branches:
      - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/
  BUILD_BUILDDIRECTORY: ${{ github.workspace }}/build/

jobs:
  Linux_Build:
    # Only run push event on master branch of main repo, but run all PRs
    if: github.event_name != 'push' || (github.repository == 'RPCS3/rpcs3' && github.ref_name == 'master')
    strategy:
      fail-fast: false
      matrix:
        include:
          #- os: ubuntu-24.04
          #  docker_img: "rpcs3/rpcs3-ci-jammy:1.6"
          #  build_sh: "/rpcs3/.ci/build-linux.sh"
          #  compiler: clang
          #  UPLOAD_COMMIT_HASH: d812f1254a1157c80fd402f94446310560f54e5f
          #  UPLOAD_REPO_FULL_NAME: "rpcs3/rpcs3-binaries-linux"
          #- os: ubuntu-24.04
          #  docker_img: "rpcs3/rpcs3-ci-jammy:1.6"
          #  build_sh: "/rpcs3/.ci/build-linux.sh"
          #  compiler: gcc
          - os: ubuntu-24.04-arm
            docker_img: "rpcs3/rpcs3-ci-jammy-aarch64:1.6"
            build_sh: "/rpcs3/.ci/build-linux-aarch64.sh"
            compiler: clang
            UPLOAD_COMMIT_HASH: a1d35836e8d45bfc6f63c26f0a3e5d46ef622fe1
            UPLOAD_REPO_FULL_NAME: "rpcs3/rpcs3-binaries-linux-arm64"
          #- os: ubuntu-24.04-arm
          #  docker_img: "rpcs3/rpcs3-ci-jammy-aarch64:1.6"
          #  build_sh: "/rpcs3/.ci/build-linux-aarch64.sh"
          #  compiler: gcc
    name: RPCS3 Linux ${{ matrix.os }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/ccache
      DEPLOY_APPIMAGE: true
      APPDIR: "/rpcs3/build/appdir"
      ARTDIR: "/root/artifacts"
      BUILDDIR: "/rpcs3/build/"
      RELEASE_MESSAGE: "/rpcs3/GitHubReleaseMessage.txt"
      COMPILER: ${{ matrix.compiler }}
      UPLOAD_COMMIT_HASH: ${{ matrix.UPLOAD_COMMIT_HASH }}
      UPLOAD_REPO_FULL_NAME: ${{ matrix.UPLOAD_REPO_FULL_NAME }}
      BUILD_UNIT_TESTS: github.event_name == 'pull_request' && 'ON' || 'OFF'
      RUN_UNIT_TESTS: 'ON'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{github.run_id}}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Docker setup and build
        run: |
          docker pull --quiet ${{ matrix.docker_img }}
          docker run \
            -v $PWD:/rpcs3 \
            --env-file .ci/docker.env \
            -v ${{ env.CCACHE_DIR }}:/root/.ccache  \
            -v ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}:${{ env.ARTDIR }} \
            -v ${{ env.BUILD_BUILDDIRECTORY }}:${{ env.BUILDDIR }} \
            ${{ matrix.docker_img }} \
            ${{ matrix.build_sh }}

      - name: Unit tests
        #if: github.event_name == 'pull_request'
        working-directory: ${{ github.workspace }}
        run: |
          sudo mkdir /rpcs3
          sudo ln -sr /home/runner/work/rpcs3/rpcs3/build /rpcs3/build
          LIB_COPY=$(ldd /rpcs3/build/bin/rpcs3_test | grep 'not found' | awk '{print $1}')
          for i in $LIB_COPY; do sudo ln -sv /rpcs3/tests/lib/$i /lib/$(uname -m)-linux-gnu/; done
          ldd /rpcs3/build/bin/rpcs3_test
          sudo ctest -j -VV -C Release --test-dir ${{ env.BUILDDIR }} --output-on-failure

      - name: Save build Ccache
        #if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-build-ccache.outputs.cache-primary-key }}


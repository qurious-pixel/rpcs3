name: Build RPCS3

defaults:
  run:
    shell: bash
on:
  push:
    branches:
      - master # Only trigger push event on 'master' branch
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  BUILD_REPOSITORY_NAME: ${{ github.repository }}
  BUILD_SOURCEBRANCHNAME: ${{ github.ref_name }}
  BUILD_PR_NUMBER: ${{ github.event.pull_request.number }}
  BUILD_SOURCEVERSION: ${{ github.sha }}
  BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}/artifacts/

jobs:
  Windows_Build_Clang:
    # Only run push event on master branch of main repo, but run all PRs
    if: github.event_name != 'push' || (github.repository == 'RPCS3/rpcs3' && github.ref_name == 'master')
    name: RPCS3 Windows Clang
    runs-on: windows-2025
    strategy:
      matrix:
        include:
          - msys2: clang64
            compiler: clang
            arch: win64
    env:
      CCACHE_DIR: 'C:\ccache'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2 }}
          update: true
          cache: true
          install: |
            mingw-w64-clang-x86_64-clang
            mingw-w64-clang-x86_64-ccache
            mingw-w64-clang-x86_64-cmake
            mingw-w64-clang-x86_64-lld
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-libc++
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-llvm
            mingw-w64-clang-x86_64-ffmpeg
            mingw-w64-clang-x86_64-opencv
            mingw-w64-clang-x86_64-glew
            mingw-w64-clang-x86_64-vulkan
            mingw-w64-clang-x86_64-vulkan-headers
            mingw-w64-clang-x86_64-vulkan-loader
            mingw-w64-clang-x86_64-gtest
            mingw-w64-clang-x86_64-qt6-base
            mingw-w64-clang-x86_64-qt6-declarative
            mingw-w64-clang-x86_64-qt6-multimedia
            mingw-w64-clang-x86_64-qt6-svg
            base-devel
            curl
            git
            p7zip

      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Build RPCS3
        shell: msys2 {0}
        run: |
          export CCACHE_DIR=$(cygpath -u "$CCACHE_DIR")
          echo "CCACHE_DIR=$CCACHE_DIR"
          .ci/setup-windows-ci-vars.sh ${{ matrix.arch }} ${{ matrix.compiler }}
          .ci/build-windows-clang.sh

      - name: Save build Ccache
        if: github.ref == 'refs/heads/master'
        uses: actions/cache/save@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-build-ccache.outputs.cache-primary-key }}

      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: RPCS3 for Windows (${{ runner.arch }}, ${{ matrix.compiler }})
          path: ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}
          compression-level: 0
          if-no-files-found: error

  Linux_Build:
    # Only run push event on master branch of main repo, but run all PRs
    if: github.event_name != 'push' || (github.repository == 'RPCS3/rpcs3' && github.ref_name == 'master')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            docker_img: "rpcs3/rpcs3-ci-jammy:1.6"
            build_sh: "/rpcs3/.ci/build-linux.sh"
            compiler: clang
            UPLOAD_COMMIT_HASH: d812f1254a1157c80fd402f94446310560f54e5f
            UPLOAD_REPO_FULL_NAME: "rpcs3/rpcs3-binaries-linux"
    name: RPCS3 Linux ${{ matrix.os }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/ccache
      DEPLOY_APPIMAGE: true
      APPDIR: "/rpcs3/build/appdir"
      ARTDIR: "/root/artifacts"
      RELEASE_MESSAGE: "/rpcs3/GitHubReleaseMessage.txt"
      COMPILER: ${{ matrix.compiler }}
      UPLOAD_COMMIT_HASH: ${{ matrix.UPLOAD_COMMIT_HASH }}
      UPLOAD_REPO_FULL_NAME: ${{ matrix.UPLOAD_REPO_FULL_NAME }}
      RUN_UNIT_TESTS: github.event_name == 'pull_request' && 'ON' || 'OFF'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Restore build Ccache
        uses: actions/cache/restore@main
        id: restore-build-ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-${{github.run_id}}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.compiler }}-${{ runner.arch }}-

      - name: Docker setup and build
        run: |
          docker pull --quiet ${{ matrix.docker_img }}
          docker run \
            -v $PWD:/rpcs3 \
            --env-file .ci/docker.env \
            -v ${{ env.CCACHE_DIR }}:/root/.ccache  \
            -v ${{ env.BUILD_ARTIFACTSTAGINGDIRECTORY }}:${{ env.ARTDIR }} \
            ${{ matrix.docker_img }} \
            ${{ matrix.build_sh }}


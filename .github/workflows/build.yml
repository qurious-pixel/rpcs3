name: AppImage

on: 
  push:
  
jobs:
  AppImage:
    strategy:
      fail-fast: false
      matrix:
        QT: [5,6] # [5] # 
    name: build Qt${{ matrix.QT }} AppImage from src ubuntu-20.04
    runs-on: ubuntu-20.04
      
    steps:
      - name: Checkout Upstream Repo
        uses: actions/checkout@v3
        with:
          repository: Megamouse/rpcs3 # RPCS3/rpcs3 # Nekotekina/rpcs3 # 
          ref: Qt6-fun # master # typei # 
          submodules: recursive
      - name: Checkout AppImage Repo
        uses: actions/checkout@v3
        with:
            clean: false
            path: ci      
      - name: cache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: build-ccache-Qt${{ matrix.QT }}-${{ env.GITHUB_RUN_ID }}
          restore-keys: |
            build-ccache-Qt${{ matrix.QT }}
            build-ccache
      - uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.0'
      - name: Install cmake
        run: |
          pip install cmake
          cmake --version

      - name: Install packages
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          curl -Lvs https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-16 main"
          sudo apt update
          sudo apt install -y build-essential libasound2-dev libpulse-dev libopenal-dev libglew-dev zlib1g-dev libedit-dev \
          libvulkan-dev libudev-dev git libevdev-dev libsdl2-dev libjack-dev libsndio-dev ninja-build \
          gcc-11 g++-11 libcurl4-openssl-dev lld desktop-file-utils appstream libbrotli-dev libxcb-cursor-dev \
          clang-16 lld-16 # ccache 
          sudo apt autoremove
          sudo apt clean
      - name: Install Qt5
        run: |
          sudo add-apt-repository -y ppa:beineri/opt-qt-5.15.4-focal
          sudo apt install -y qt515base qt515svg qt515multimedia qt515wayland
          QT_BASE_DIR=/opt/qt515
          echo QT_BASE_DIR=/opt/qt515 >> $GITHUB_ENV
          echo PATH="$QT_BASE_DIR"/bin:"$PATH" >> $GITHUB_ENV 
          echo LD_LIBRARY_PATH="$QT_BASE_DIR"/lib/x86_64-linux-gnu:"$QT_BASE_DIR"/lib >> $GITHUB_ENV
          sudo sed -i 's/ThreadEngineStarter<void>(ThreadEngine<void> \*_threadEngine)/ThreadEngineStarter(ThreadEngine<void> \*_threadEngine)/' /opt/qt515/include/QtConcurrent/qtconcurrentthreadengine.h
          if [[ ! -e 3rdparty/qt5.cmake ]]; then cp -v ci/qt5.cmake 3rdparty/qt5.cmake; fi
          sed -i '/t6/ s/6/5/g' rpcs3/CMakeLists.txt
          sed -i 's/qt6/qt5/g' rpcs3/rpcs3qt/CMakeLists.txt
        if: ${{ matrix.QT == 5 }}
      - name: Install Qt6
        run: |
          pyver=$(python3 --version | awk '{print $2}')
          echo "python version is $pyver"
          curl -sLO https://files.pythonhosted.org/packages/47/42/351389ca36c7adfc5f4e92d086cdb2bdbde13f1b89ee882f4a1cab2183ac/yaqti-2021.7.29-py3-none-any.whl
          pip install --upgrade pip
          python3 -m pip install yaqti-2021.7.29-py3-none-any.whl
          curl -sL https://raw.githubusercontent.com/qurious-pixel/yaqti/fetch/yaqti/fetchers.py -o $HOME/.local/lib/python${pyver%.*}/site-packages/yaqti/fetchers.py
          python -m yaqti install --os linux --platform desktop --version ${{ env.yaqti }} --modules gcc_64 --set-envs --install-deps          QT_BASE_DIR=$PWD/3rdparty/Qt6
          echo QT_BASE_DIR="${{github.workspace}}/qt/${{ env.yaqti }}/gcc_64 >> $GITHUB_ENV
          echo Qt_DIR="${{github.workspace}}/qt/${{ env.yaqti }}/gcc_64/lib/cmake/Qt6" >> $GITHUB_ENV
          echo PATH="$QT_BASE_DIR"/bin:"$PATH" >> $GITHUB_ENV 
          echo LD_LIBRARY_PATH="$QT_BASE_DIR"/lib/x86_64-linux-gnu:"$QT_BASE_DIR"/lib >> $GITHUB_ENV
        env:
          yaqti: 6.5.0
        if: ${{ matrix.QT == 6 }}
      #- name: Build llvmlibs
      #  run: |
      #    curl -sLO https://github.com/RPCS3/llvm-mirror/releases/download/custom-build/llvmlibs-linux.tar.gz
      #    mkdir llvmlibs
      #    tar -xzf ./llvmlibs-linux.tar.gz -C llvmlibs
      - name: Build vulkan-sdk
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.198-bionic.list https://packages.lunarg.com/vulkan/1.2.198/lunarg-vulkan-1.2.198-bionic.list
          sudo apt update
          sudo apt install -y vulkan-sdk
      - name: Fixes
        run: |
          echo "fixes"
          #sed -i 's/std::min/std::min<unsigned>/g' rpcs3/rpcs3qt/osk_dialog_frame.cpp
          #sed -i 's/15/16/g' 3rdparty/llvm.cmake
          #sed -i 's/15/16/g' rpcs3/util/types.hpp
          #ls -al /usr/lib/llvm-16/bin/
          #echo PATH=/usr/lib/llvm-16/bin:"$PATH" >> $GITHUB_ENV 
          

      - name: Build RPCS3
        run: |
          export CC=/usr/lib/llvm-16/bin/clang # gcc-11 # 
          export CXX=/usr/lib/llvm-16/bin/clang++ # g++-11 # 
          export LINKER=lld # gold # 
          export AR=/usr/lib/llvm-16/bin/llvm-ar # /usr/bin/gcc-ar-11 #  
          export RANLIB=/usr/lib/llvm-16/bin/llvm-ranlib # /usr/bin/gcc-ranlib-11 # 
          #export CFLAGS="-fuse-linker-plugin"
          export CFLAGS="$CFLAGS -fuse-ld=${LINKER}"
          mkdir build && cd build
          cmake ..                                               \
              -DCMAKE_BUILD_TYPE=Release                         \
              -DCMAKE_INSTALL_PREFIX=/usr                        \
              -DUSE_NATIVE_INSTRUCTIONS=OFF                      \
              -DUSE_PRECOMPILED_HEADERS=OFF                      \
              -DCMAKE_C_FLAGS="$CFLAGS"                          \
              -DCMAKE_CXX_FLAGS="$CFLAGS"                        \
              -DCMAKE_AR="$AR"                                   \
              -DCMAKE_RANLIB="$RANLIB"                           \
              -DUSE_SYSTEM_CURL=ON                               \
              -DUSE_SDL=OFF                                      \
              -DOpenGL_GL_PREFERENCE=LEGACY                      \
              -DCMAKE_PREFIX_PATH=$QT_BASE_DIR                   \
              -DDISABLE_LTO=TRUE                                 \
              -G Ninja
          ninja
          ls bin || true
          #    -DLLVM_DIR=llvmlibs/lib/cmake/llvm/                \
          #    -DBUILD_LLVM_SUBMODULE=OFF                         \


           
      - name: Build AppImage
        run: |
          export CXX=/usr/lib/llvm-16/bin/clang++ # g++-11 # clang++-15 # 
          mkdir artifacts
          chmod +x ci/appimage.sh 
          ./ci/appimage.sh 
          echo "artifacts:" && ls artifacts
        continue-on-error: true  
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: RPCS3-Qt${{ matrix.QT }}-llvm16
          path: artifacts/
